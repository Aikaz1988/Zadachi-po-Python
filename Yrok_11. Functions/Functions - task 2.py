# В Урок №10. Задание №1 вы создавали словарь с информацией о питомце. 
# Теперь нам нужна "настоящая" база данных для ветеринарной клиники.
# Подробный требуемый функционал будет ниже. Пока что справка: 
# - Создайте функцию create 
# - Создайте функцию read
# - Создайте функцию update
# - Создайте функцию delete
# - Используйте словарь pets, который будет предоставлен ниже, либо создайте свой аналогичный
# Функция create:
# Данная функция будет создавать новую запись с информацией о питомце и добавлять эту информацию в наш словарь pets
# Функция read
# Данная функция будет отображать информацию о запрашиваемом питомце в виде: 
# Это желторотый питон по кличке "Каа". Возраст питомца: 19 лет. Имя владельца: Саша
# Функция update
# Данная функция будет обновлять информацию об указанном питомце
# Функция delete
# Данная функция будет удалять запись о существующем питомце

# Структура результирующего словаря pets будет как и в Урок №10. Задание №1, но с небольшим видоизменением: 
# Словарь pets
# pets = {
#     1:
#         {
#             "Мухтар": {
#                 "Вид питомца": "Собака",
#                 "Возраст питомца": 9,
#                 "Имя владельца": "Павел"
#             },
#         },

# Здесь, 1 и 2 - это идентификаторы наших питомцев. 
# Это уникальные ключи, по которым мы сможем обращаться к нашим записям в "базе данных"
# Суть будущей программы будет заключаться в следующем:
# ●	Программа будет работать с помощью цикла while с условием command != 'stop', то есть до тех пор, 
#     пока на предложение ввести команду, пользователь не введёт слово stop
# ●	Перед взаимодействием с "базой данных" запрашивается одна из команд в качестве пользовательского ввода. 
#     Пусть это будет переменная command
# ●	Функция create должна добавлять новую информацию таким образом, чтобы идентификатор увеличивался на единицу. 
#     Чтобы у вас была возможность получать последний ключ в словаре воспользуйтесь импортом модуля collections. 
#     В начале вашей программы пропишите строчку: import collections, а в функции create в первых строках пропишите следующий код: 

# def create():
#   last = collections.deque(pets, maxlen=1)[0]
# last в данном случае и будет число последнего ключа (или в нашей логике - идентификатора записи). 
# Именно его и необходимо будет увеличивать на единицу при добавлении следующей записи.
# Как вам уже известно - суть функций заключается в том, чтобы использовать один и тот же код в нескольких местах. 
# В данной задаче вам предстоит получать информацию о питомце несколько раз. 
# Чтобы не повторяться в коде, вам нужно создать такие функции 
# get_pet(ID):
# def get_pet(ID):
#   # функция, с помощью которой вы получите информацию о питомце в виде словаря
#   # сделайте проверку, если питомца с таким ID нету в нашей "базе данных"
#   # верните в этом случае False
#   # а если питомец всё же есть в "базе данных" - верните информацию о нём
#   # выглядеть это может примерно так:
#   return pets[ID] if ID in pets.keys() else False
# get_suffix(age):
# def get_suffix(age):
#   # функция, с помощью которой можно получить суффикс
#   # 'год', 'года', 'лет'
#   # реализацию этой функции вам предстоит придумать самостоятельно
#   # функция будет возвращать соответствующую строку
#   return
# pets_list():
# def pets_list():
#   # Эта функция будет создана для удобства отображения всего списка питомцев
#   # Информацию по каждому питомцу можно вывести с помощью цикла for
# Обратите внимание, если ID не существует в словаре с питомцами - будет возникать ошибка. 
# Вам можно от неё избавиться, если правильно составить проверочное условие. 
# Здесь не потребуется использовать такие конструкции, как try, except, чтобы обработать возникшую ошибку

import collections

pets = {
    1:
        {
            "Мухтар": {
                "Вид питомца": "Собака",
                "Возраст питомца": 9,
                "Имя владельца": "Павел"
            },
        },
    2:
        {
            "Каа": {
                "Вид питомца": "желторотый питон",
                "Возраст питомца": 19,
                "Имя владельца": "Саша"
            },
        },
}


def create():
    last = collections.deque(pets, maxlen = 1)[0]
    name = input('Введите кличку питомца: ')
    type = input('Введите вид питомца: ')
    age = int(input('Введите возраст питомца: '))
    owner = input('Введите имя владельца: ')
    pet_id = last + 1
    pets[pet_id] = {
        name: {
            "Вид питомца": type,
            "Возраст питомца": age,
            "Имя владельца": owner
        }
    }
    print('Питомец успешно добавлен в базу данных!')

def read():
    pet_id = int(input('Введите номер питомца: '))
    if pet_id in pets.keys():
        name = list(pets[pet_id].keys())[0]
        info = pets[pet_id][name]
        age_suffix = get_suffix(info["Возраст питомца"])
        print('Это', info["Вид питомца"], 'по кличке', '"{[name]}"' + '. Возраст питомца:', info["Возраст питомца"], age_suffix + ". Имя владельца:", info["Имя владельца"])
    else:
        print('Питомца с таким номером нет в базе данных')

def update():
    pet_id = int(input('Введите номер питомца: '))
    if pet_id in pets.keys():
        name = list(pets[pet_id].keys())[0]
        pets[pet_id][name]["Вид питомца"] = input('Введите вид питоца: ')
        pets[pet_id][name]["Возраст питомца"] = int(input('Введите возраст питомца: '))
        pets[pet_id][name]["Имя владельца"] = input('Введите имя владельца: ')
        print('Информация о питомце успешно обновлена')
    else:
        print('Питомца с таким номером нет в базе данных')

def delete():
    pet_id = int(input('Введите номер питомца: '))
    if pet_id in pets.keys():
        del pets[pet_id]
        print('Информация о питомце успешно удалена')
    else:
        print('Питомца с таким номером нет в базе данных')

def get_pet(pet_id):
    return pets[pet_id] if pet_id in pets.keys() else False

def get_suffix(age):
    age_number = age % 10
    if age_number == 1 and (age < 10 or age > 20):
        return 'год'
    elif 2 <= age_number <= 4 and (age < 10 or age > 20):
        return 'года'
    else:
        return 'лет'

def pets_list():
    for pet_id, info in pets.items():
        print(pet_id, info)

print('Команды: create, read, update, delete, list, stop')
command = input('Введите команду: ')
while command != 'stop':
    if command == 'create':
        create()
    elif command == 'read':
        read()
    elif command == 'update':
        update()
    elif command == 'delete':
        delete()
    elif command == 'list':
        pets_list()
    elif command == 'stop':
        print('Программа завершена')
        break
    else:
        print('Неправильная команда')
    command = input('Введите команду: ')
